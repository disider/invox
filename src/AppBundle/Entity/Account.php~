<?php

namespace AppBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;

class Account
{
    /** @var int */
    private $id;


    /**
     * @var Company
     */
    private $company;

    /**
     * @Assert\NotBlank(message="error.empty_name")
     *
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $type;

    /** @var string */
    private $iban;

    /** @var float */
    private $initialAmount = 0;
    /** @var float */
    private $currentAmount = 0;

    /**
     * @var ArrayCollection
     */
    private $incomeNotes;

    /**
     * @var ArrayCollection
     */
    private $outcomeNotes;

    public static function create(Company $company, $type, $name, $initialAmount, $currentAmount, $iban)
    {
        $entity = new self();
        $entity->type = $type;
        $entity->name = $name;
        $entity->iban = $iban;
        $entity->initialAmount = $initialAmount;
        $entity->currentAmount = $currentAmount;

        $company->addAccount($entity);

        return $entity;
    }

    public function __toString()
    {
        return $this->name;
    }

    public function __construct()
    {
        $this->incomeNotes = new ArrayCollection();
        $this->outcomeNotes = new ArrayCollection();
    }

    public function setId($id)
    {
        $this->id = $id;
    }

    public function getId()
    {
        return $this->id;
    }

    public function setCompany(Company $company)
    {
        $this->company = $company;
    }

    public function getCompany()
    {
        return $this->company;
    }

    public function getType()
    {
        return $this->type;
    }

    public function setType($type)
    {
        $this->type = $type;
    }

    public function getName()
    {
        return $this->name;
    }

    public function setName($name)
    {
        $this->name = $name;
    }

    public function getInitialAmount()
    {
        return $this->initialAmount;
    }

    public function setInitialAmount($initialAmount)
    {
        $this->initialAmount = $initialAmount;
    }

    public function getCurrentAmount()
    {
        return $this->currentAmount;
    }

    public function setCurrentAmount($currentAmount)
    {
        $this->currentAmount = $currentAmount;
    }

    public function getIban()
    {
        return $this->iban;
    }

    public function setIban($iban)
    {
        $this->iban = $iban;
    }

    public function addOutcomeNote(PettyCashNote $note)
    {
        $this->outcomeNotes->add($note);
    }

    public function addIncomeNote(PettyCashNote $note)
    {
        $this->incomeNotes->add($note);
    }

    /**
     * Remove outcomeNote
     *
     * @param \AppBundle\Entity\PettyCashNote $outcomeNote
     */
    public function removeOutcomeNote(\AppBundle\Entity\PettyCashNote $outcomeNote)
    {
        $this->outcomeNotes->removeElement($outcomeNote);
    }

    /**
     * Get outcomeNotes
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getOutcomeNotes()
    {
        return $this->outcomeNotes;
    }

    /**
     * Remove incomeNote
     *
     * @param \AppBundle\Entity\PettyCashNote $incomeNote
     */
    public function removeIncomeNote(\AppBundle\Entity\PettyCashNote $incomeNote)
    {
        $this->incomeNotes->removeElement($incomeNote);
    }

    /**
     * Get incomeNotes
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIncomeNotes()
    {
        return $this->incomeNotes;
    }
}
