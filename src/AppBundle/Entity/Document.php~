<?php

namespace AppBundle\Entity;

use AppBundle\Exception\InvalidDocumentTypeException;
use AppBundle\Model\DocumentType;
use AppBundle\Model\VatGroupCollection;
use AppBundle\Validator\Constraints as AppAssert;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @AppAssert\ValidCustomer
 */
class Document extends Uploadable
{
    const INCOMING = 'incoming';
    const OUTGOING = 'outgoing';
    const NO_DIRECTION = 'none';

    /** @var int */
    private $id;

    /**
     * @var Company
     */
    private $company;

    /** @var string */
    private $type;

    /** @var string */
    private $title;

    /** @var string */
    private $ref;

    /** @var string */
    private $direction;

    /** @var string */
    private $companyName;

    /** @var string */
    private $companyVatNumber;

    /** @var string */
    private $companyAddress;

    /** @var User */
    private $customer;

    /** @var string */
    private $customerCode;

    /**
     * @var string
     */
    private $customerName;

    /** @var string */
    private $customerVatNumber;

    /** @var string */
    private $customerFiscalCode;

    /** @var string */
    private $customerPhoneNumber;

    /** @var string */
    private $customerFaxNumber;

    /** @var string */
    private $customerAddress;

    /** @var string */
    private $customerAddressNotes;

    /** @var string */
    private $customerZipCode;

    /** @var string */
    private $customerCity;

    /** @var string */
    private $customerProvince;

    /**
     * @var Country
     */
    private $customerCountry;

    /**
     * @Assert\NotBlank(message="error.empty_number")
     *
     * @var string
     */
    private $number;

    /**
     * @Assert\NotBlank(message="error.empty_year")
     *
     * @var int
     */
    private $year;

    /**
     * @Assert\NotBlank(message="error.empty_issue_date")
     *
     * @var \DateTime
     */
    private $issuedAt;

    /** @var \DateTime */
    private $validUntil;

    /** @var string */
    private $subject;

    /** @var float */
    private $discount = 0;

    /** @var float */
    private $netTotal = 0;

    /** @var float */
    private $taxes = 0;

    /** @var float */
    private $grossTotal = 0;

    /** @var string */
    private $notes;

    /**
     * @Assert\Valid
     *
     * @var ArrayCollection
     */
    private $rows;

    /**
     * @var ArrayCollection
     */
    private $pettyCashNotes;
    
    /** @var boolean */
    private $showTotals = true;
    
    /** @var PaymentType */
    private $paymentType;
    
    /** @var string */
    private $language = 'it';

    public static function create(
        $type,
        $direction,
        Company $company,
        Customer $customer,
        $number,
        $year,
        \DateTime $issuedAt
    )
    {
        $entity = new self();

        if (!in_array($type, DocumentType::getTypes())) {
            throw new InvalidDocumentTypeException($type);
        }

        if (!in_array($direction, array(self::INCOMING, self::OUTGOING))) {
            throw new \LogicException('Invalid document direction: ' . $direction);
        }

        $entity->type = $type;
        $entity->direction = $direction;
        $entity->company = $company;
        $entity->companyName = $company->getName();
        $entity->companyAddress = $company->getAddress();
        $entity->companyVatNumber = $company->getVatNumber();
        $entity->customer = $customer;
        $entity->customerCode = $customer->getCode();
        $entity->customerName = $customer->getName();
        $entity->customerAddress = $customer->getAddress();
        $entity->customerVatNumber = $customer->getVatNumber();
        $entity->number = $number;
        $entity->year = $year;
        $entity->issuedAt = $issuedAt;

        return $entity;
    }

    public static function createEmpty($type, $direction, $number, $year, Company $company = null)
    {
        $entity = new self();

        if (!in_array($type, DocumentType::getTypes())) {
            throw new InvalidDocumentTypeException($type);
        }

        if (!in_array($direction, array(self::INCOMING, self::OUTGOING))) {
            throw new \LogicException('Invalid document direction: ' . $direction);
        }

        $entity->type = $type;
        $entity->direction = $direction;
        $entity->company = $company;
        $entity->number = $number;
        $entity->year = $year;
        $entity->issuedAt = new \DateTime();
        $entity->addRow(DocumentRow::createEmpty());

        return $entity;
    }

    public function __construct()
    {
        $this->direction = self::NO_DIRECTION;
        $this->rows = new ArrayCollection();
        $this->pettyCashNotes = new ArrayCollection();
    }

    public function __toString()
    {
        return (string)$this->formatNumber();
    }

    public function setId($id)
    {
        $this->id = $id;
    }

    /** @return string */
    public function getId()
    {
        return $this->id;
    }

    /** @return string */
    public function getType()
    {
        return $this->type;
    }

    public function setType($type)
    {
        $this->type = $type;
    }

    public function getCompany()
    {
        return $this->company;
    }

    public function setCompany($company)
    {
        $this->company = $company;
    }

    public function getTitle()
    {
        return $this->title;
    }

    public function setTitle($title)
    {
        $this->title = $title;
    }

    public function getRef()
    {
        return $this->ref;
    }

    public function setRef($ref)
    {
        $this->ref = $ref;
    }

    public function getDirection()
    {
        if ($this->type == DocumentType::INVOICE) {
            return ($this->direction == self::NO_DIRECTION)
                ? self::OUTGOING : $this->direction;
        }

        return self::NO_DIRECTION;
    }

    public function hasDirection()
    {
        return $this->getDirection() !== self::NO_DIRECTION;
    }

    public function setDirection($direction)
    {
        $this->direction = $direction;
    }

    public function getCompanyName()
    {
        return $this->companyName;
    }

    public function getCompanyAddress()
    {
        return $this->companyAddress;
    }

    public function getCompanyVatNumber()
    {
        return $this->companyVatNumber;
    }

    public function getCustomer()
    {
        return $this->customer;
    }

    public function setCustomer($customer)
    {
        $this->customer = $customer;
    }

    public function getCustomerCode()
    {
        return $this->customerCode;
    }

    public function setCustomerCode($customerCode)
    {
        $this->customerCode = $customerCode;
    }

    public function getCustomerName()
    {
        return $this->customerName;
    }

    public function setCustomerName($customerName)
    {
        $this->customerName = $customerName;
    }

    public function getCustomerVatNumber()
    {
        return $this->customerVatNumber;
    }

    public function setCustomerVatNumber($customerVatNumber)
    {
        $this->customerVatNumber = $customerVatNumber;
    }

    public function getCustomerFiscalCode()
    {
        return $this->customerFiscalCode;
    }

    public function setCustomerFiscalCode($customerFiscalCode)
    {
        $this->customerFiscalCode = $customerFiscalCode;
    }

    public function getCustomerPhoneNumber()
    {
        return $this->customerPhoneNumber;
    }

    public function setCustomerPhoneNumber($customerPhoneNumber)
    {
        $this->customerPhoneNumber = $customerPhoneNumber;
    }

    public function getCustomerFaxNumber()
    {
        return $this->customerFaxNumber;
    }

    public function setCustomerFaxNumber($customerFaxNumber)
    {
        $this->customerFaxNumber = $customerFaxNumber;
    }

    public function getCustomerAddress()
    {
        return $this->customerAddress;
    }

    public function setCustomerAddress($customerAddress)
    {
        $this->customerAddress = $customerAddress;
    }

    public function getCustomerAddressNotes()
    {
        return $this->customerAddressNotes;
    }

    public function setCustomerAddressNotes($customerAddressNotes)
    {
        $this->customerAddressNotes = $customerAddressNotes;
    }

    public function getCustomerZipCode()
    {
        return $this->customerZipCode;
    }

    public function setCustomerZipCode($customerZipCode)
    {
        $this->customerZipCode = $customerZipCode;
    }

    public function getCustomerCity()
    {
        return $this->customerCity;
    }

    public function setCustomerCity($customerCity)
    {
        $this->customerCity = $customerCity;
    }

    public function getCustomerProvince()
    {
        return $this->customerProvince;
    }

    public function setCustomerProvince($customerProvince)
    {
        $this->customerProvince = $customerProvince;
    }

    public function getCustomerCountry()
    {
        return $this->customerCountry;
    }

    public function setCustomerCountry(Country $customerCountry = null)
    {
        $this->customerCountry = $customerCountry;
    }

    public function getNumber()
    {
        return $this->number;
    }

    public function setNumber($number)
    {
        $this->number = $number;
    }

    public function getYear()
    {
        return $this->year;
    }

    public function setYear($year)
    {
        $this->year = $year;
    }

    public function getIssuedAt()
    {
        return $this->issuedAt;
    }

    public function setIssuedAt(\DateTime $issuedAt)
    {
        $this->issuedAt = $issuedAt;
    }

    public function getSubject()
    {
        return $this->subject;
    }

    public function setSubject($subject)
    {
        $this->subject = $subject;
    }

    public function getDiscount()
    {
        return $this->discount;
    }

    public function setDiscount($discount)
    {
        $this->discount = $discount;
    }

    public function getNotes()
    {
        return $this->notes;
    }

    public function setNotes($notes)
    {
        $this->notes = $notes;
    }

    public function getNetTotal()
    {
        return $this->netTotal;
    }

    public function setNetTotal($netTotal)
    {
        $this->netTotal = $netTotal;
    }

    public function getTaxes()
    {
        return $this->taxes;
    }

    public function setTaxes($taxes)
    {
        $this->taxes = $taxes;
    }

    public function getGrossTotal()
    {
        return $this->grossTotal;
    }

    public function setGrossTotal($grossTotal)
    {
        $this->grossTotal = $grossTotal;
    }

    
    public function isShowTotals()
    {
        return $this->showTotals;
    }

    public function setShowTotals($showTotals)
    {
        $this->showTotals = $showTotals;
    }

    public function getLanguage()
    {
        return $this->language;
    }

    public function setLanguage($language)
    {
        $this->language = $language;
    }

    public function getRows()
    {
        return $this->rows;
    }

    public function setRows($rows)
    {
        $this->rows = $rows;
    }

    public function getRow($index)
    {
        return $this->rows->get($index);
    }

    public function countRows()
    {
        return $this->rows->count();
    }

    public function addRow(DocumentRow $row)
    {
        if (!$this->rows->contains($row)) {
            $this->rows->add($row);
            $row->setDocument($this);
        }
    }

    public function removeRow(DocumentRow $row)
    {
        $this->rows->removeElement($row);
    }

    public function formatNumber($separator = '/')
    {
        return sprintf('%03s%s%02d', $this->number, $separator, substr($this->year, 2));
    }

    public function hasRowId($rowId)
    {
        foreach ($this->rows as $row) {
            if ($row->getId() == $rowId) {
                return true;
            }
        }

        return false;
    }

    public function calculateTotals()
    {
//        dump('Calculating rows totals: ' . count($this->rows));
        /** @var DocumentRow $row */
        foreach ($this->rows as $row) {
            $row->calculateTotals();
        }

        $this->netTotal = $this->evalRows('netCost');
        $this->taxes = $this->evalRows('taxes');
        $this->grossTotal = $this->evalRows('grossCost');

//        dump('Document: ' . $this->getNumber());
//        dump($this->netTotal, $this->taxes, $this->grossTotal);
    }

    private function evalRows($method)
    {
        $method = 'get' . ucfirst($method);
        $total = 0;

        /** @var DocumentRow $row */
        foreach ($this->rows as $row) {
            $total += $row->$method();
        }

        return $total;
    }

    public function getVatGroupCollection()
    {
        $collection = new VatGroupCollection();

        /** @var DocumentRow $row */
        foreach ($this->rows as $row) {
            $collection->addRow($row);
        }
        return $collection;
    }

    public function getAvailableAmount()
    {
        return $this->grossTotal;
    }

    public function is($type)
    {
        return $this->type == $type;
    }

    protected function getUploadDir()
    {
        return 'uploads/attachments';
    }

    /**
     * Set companyName
     *
     * @param string $companyName
     *
     * @return Document
     */
    public function setCompanyName($companyName)
    {
        $this->companyName = $companyName;

        return $this;
    }

    /**
     * Set companyAddress
     *
     * @param string $companyAddress
     *
     * @return Document
     */
    public function setCompanyAddress($companyAddress)
    {
        $this->companyAddress = $companyAddress;

        return $this;
    }

    /**
     * Set companyVatNumber
     *
     * @param string $companyVatNumber
     *
     * @return Document
     */
    public function setCompanyVatNumber($companyVatNumber)
    {
        $this->companyVatNumber = $companyVatNumber;

        return $this;
    }

    /**
     * Set validUntil
     *
     * @param \DateTime $validUntil
     *
     * @return Document
     */
    public function setValidUntil($validUntil)
    {
        $this->validUntil = $validUntil;

        return $this;
    }

    /**
     * Get validUntil
     *
     * @return \DateTime
     */
    public function getValidUntil()
    {
        return $this->validUntil;
    }

    /**
     * Get showTotals
     *
     * @return boolean
     */
    public function getShowTotals()
    {
        return $this->showTotals;
    }

    /**
     * Set paymentType
     *
     * @param string $paymentType
     *
     * @return Document
     */
    public function setPaymentType($paymentType)
    {
        $this->paymentType = $paymentType;

        return $this;
    }

    /**
     * Get paymentType
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->paymentType;
    }

    /**
     * Add pettyCashNote
     *
     * @param \AppBundle\Entity\InvoicePerNote $pettyCashNote
     *
     * @return Document
     */
    public function addPettyCashNote(\AppBundle\Entity\InvoicePerNote $pettyCashNote)
    {
        $this->pettyCashNotes[] = $pettyCashNote;

        return $this;
    }

    /**
     * Remove pettyCashNote
     *
     * @param \AppBundle\Entity\InvoicePerNote $pettyCashNote
     */
    public function removePettyCashNote(\AppBundle\Entity\InvoicePerNote $pettyCashNote)
    {
        $this->pettyCashNotes->removeElement($pettyCashNote);
    }

    /**
     * Get pettyCashNotes
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPettyCashNotes()
    {
        return $this->pettyCashNotes;
    }
}
