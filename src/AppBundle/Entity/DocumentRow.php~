<?php

namespace AppBundle\Entity;

use AppBundle\Exception\NegativeVatException;
use AppBundle\Exception\NonPositiveAmountException;
use AppBundle\Exception\NonPositiveQuantityException;
use Symfony\Component\Validator\Constraints as Assert;

class DocumentRow
{
    /** @var int */
    private $id;

    /** @var Document */
    private $document;

    /**
     * @Assert\NotBlank(message="error.empty_position")
     *
     * @var int
     */
    private $position;

    /**
     * @Assert\NotBlank(message="error.empty_title")
     *
     * @var string
     */
    private $title;

    /** @var string */
    private $description;

    /**
     * @Assert\NotBlank(message="error.empty_unit_price")
     *
     * @var float
     */
    private $unitPrice = 0;

    /** @var float */
    private $quantity = 0;

    /** @var float */
    private $vat = 0;

    /** @var string */
    private $vatDescription;

    /** @var float */
    private $discount = 0;

    /** @var float */
    private $netCost = 0;

    /** @var float */
    private $taxes = 0;

    /** @var float */
    private $grossCost = 0;

    public static function create($id, $position, $title, $description, $unitPrice, $quantity, $vatLine, $discount)
    {
        $entity = new self();
        $entity->id = $id;
        $entity->position = $position;
        $entity->title = $title;
        $entity->description = $description;
        $entity->unitPrice = $unitPrice;
        $entity->quantity = $quantity;
        $entity->discount = $discount;

        $entity->parseVatLine($vatLine);

        if ($entity->unitPrice <= 0) {
            throw new NonPositiveAmountException();
        }

        if ($entity->quantity <= 0) {
            throw new NonPositiveQuantityException();
        }

        if ($entity->vat < 0) {
            throw new NegativeVatException();
        }

        return $entity;
    }

    public static function createEmpty()
    {
        $entity = new self();
        $entity->position = 0;
        $entity->quantity = 1;
        $entity->discount = 0;
        $entity->vat = 0;

        return $entity;
    }

    public function getId()
    {
        return $this->id;
    }

    public function getDocument()
    {
        return $this->document;
    }

    public function setDocument(Document $document)
    {
        $this->document = $document;
        
        $document->addRow($this);
    }

    public function getPosition()
    {
        return $this->position;
    }

    public function setPosition($position)
    {
        $this->position = $position;
    }

    public function getTitle()
    {
        return $this->title;
    }

    public function setTitle($title)
    {
        $this->title = $title;
    }

    public function getDescription()
    {
        return $this->description;
    }

    public function setDescription($description)
    {
        $this->description = $description;
    }

    public function getUnitPrice()
    {
        return $this->unitPrice;
    }

    public function setUnitPrice($unitPrice)
    {
        $this->unitPrice = $unitPrice;
    }

    public function getQuantity()
    {
        return $this->quantity;
    }

    public function setQuantity($quantity)
    {
        $this->quantity = $quantity;
    }

    public function getVat()
    {
        return $this->vat;
    }

    public function setVat($vat)
    {
        $this->vat = $vat;
    }

    public function getVatDescription()
    {
        return $this->vatDescription;
    }

    public function setVatDescription($vatDescription)
    {
        $this->vatDescription = $vatDescription;
    }

    public function getDiscount()
    {
        return $this->discount;
    }

    public function setDiscount($discount)
    {
        $this->discount = $discount;
    }

    public function getNetCost()
    {
        return $this->netCost;
    }

    public function setNetCost($netCost)
    {
        $this->netCost = $netCost;
    }

    public function getTaxes()
    {
        return $this->taxes;
    }

    public function setTaxes($taxes)
    {
        $this->taxes = $taxes;
    }

    public function getGrossCost()
    {
        return $this->grossCost;
    }

    public function setGrossCost($grossCost)
    {
        $this->grossCost = $grossCost;
    }

    public function calculateTotals()
    {
        $this->netCost = $this->unitPrice * $this->quantity - $this->discount;
        $this->taxes = $this->netCost * ($this->vat / 100);
        $this->grossCost = $this->netCost + $this->taxes;

//        dump('Row: ' . $this->getTitle());
//        dump($this->netCost, $this->taxes, $this->grossCost);
    }

    private function parseVatLine($vatLine)
    {
        if (($pos = strpos($vatLine, ':')) > 0) {
            $this->vat = (float)substr($vatLine, 0, $pos);
            $this->vatDescription = str_replace('"', '', substr($vatLine, $pos + 1));
        } else {
            $this->vat = $vatLine;
            $this->vatDescription = '';
        }
    }

    public function getVatLine()
    {
        return sprintf('%s:"%s"', $this->vat, $this->vatDescription);
    }
}
